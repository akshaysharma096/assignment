require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.shared_examples 'beer json api controller spec' do

  context 'Validate no html output' do

    it { should_not render_with_layout }

  end

  context 'validate content_types' do

    it 'responds with content_type, application/json' do
      expect(response.content_type).to eq 'application/json'
    end

    it 'does not respond with content_type, application/xml' do
      expect(response.content_type).not_to eq 'application/xml'
    end

    it 'does not respond with content_type, text/html' do
      expect(response.content_type).not_to eq 'text/html'
    end

    it 'does not respond with content_type, application/xhtml+xml' do
      expect(response.content_type).not_to eq 'application/xhtml+xml'
    end

  end

  context 'validate HTTP status codes' do

    it { should respond_with(:success) }

    it { should_not respond_with(:created) }

    it { should_not respond_with(:redirect) }

    it { should_not respond_with(:missing) }

    it { should_not respond_with(:error) }
  end

end


RSpec.describe V1::BeersController, type: :controller do

  describe 'GET #index' do

    let(:beers) { create_list(:beer, 10) }

    before do
      get :index
    end

    it_behaves_like 'beer json api controller spec'

  end

  describe 'GET #show' do

    context 'pass valid params' do

      let (:beer) { create(:beer) }

      before do
        get :show, :beer_type => beer.to_param
      end

      it_behaves_like 'beer json api controller spec'

    end

    context 'pass invalid params' do

      before do
        get :show, :beer_type => 'not_your_beer'
      end

      it { should_not render_with_layout }

      it { should respond_with(:missing) }

      it { should_not respond_with(:success) }

      it 'respond with content-type application/json' do
        expect(response.content_type).to eq 'application/json'
      end

      it 'should not respond with content_type html' do
        expect(response.content_type).not_to eq 'text/html'
      end

      it 'should not respond with content-type application/xml' do
        expect(response.content_type).not_to eq 'application/xml'
      end

      it 'does not respond with content_type, application/xhtml+xml' do
        expect(response.content_type).not_to eq 'application/xhtml+xml'
      end

    end
  end
end